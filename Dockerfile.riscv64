#==============================
# Binaries Builder
#==============================
FROM ubuntu:22.04 AS builder
ARG ARCH=riscv
ARG CROSS_COMPILE=riscv64-linux-gnu-

#--------------------
# Version tag
#--------------------
ARG QEMU_TAG=v8.1.2
ARG OPENSBI_TAG=v1.3.1
ARG LINUX_TAG=v6.5

#--------------------
# Directory paths
#--------------------
## Directory path where git clones repos to
ARG DIR_PREFIX=/opt/build
## Build output path (to store output of make)
ARG OUTPUT_DIR=/opt/bin
RUN mkdir -p $OUTPUT_DIR
## Build install path (to store output of make install)
ARG INSTALL_DIR=/opt/install

## Repo paths
ARG QEMU_DIR=$DIR_PREFIX/qemu
ARG OPENSBI_DIR=$DIR_PREFIX/opensbi
ARG LINUX_DIR=$DIR_PREFIX/linux

#--------------------
# Prerequisites
#--------------------
RUN apt update
RUN apt -y install git python3 python3-pip build-essential gcc pkg-config libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build gcc-riscv64-linux-gnu libssl-dev file wget curl bc libslirp-dev cmake g++-riscv64-linux-gnu binutils-riscv64-linux-gnu flex bison
#RUN apt -y install git python3 python3-pip build-essential gcc pkg-config libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build gcc-riscv64-linux-gnu libssl-dev file wget cpio unzip rsync bc vim curl libslirp-dev cmake g++-riscv64-linux-gnu binutils-riscv64-linux-gnu flex bison qemu-user-static binfmt-support debootstrap

WORKDIR $DIR_PREFIX
RUN git clone --depth 1 --branch $QEMU_TAG https://gitlab.com/qemu-project/qemu.git
RUN git clone --depth 1 --branch $OPENSBI_TAG https://github.com/riscv-software-src/opensbi.git
RUN git clone --depth 1 --branch $LINUX_TAG https://github.com/torvalds/linux.git

#--------------------
# QEMU
#--------------------
WORKDIR $QEMU_DIR
RUN ./configure --target-list="riscv64-softmmu" --enable-slirp --prefix=$INSTALL_DIR/usr/local && \
	make -j$(nproc) && \
	make install

#--------------------
# OpenSBI
#--------------------
WORKDIR $OPENSBI_DIR
RUN make -j$(nproc) PLATFORM=generic FW_OPTIONS=0 FW_JUMP_FDT_ADDR=0xa0000000
RUN mv $OPENSBI_DIR/build/platform/generic/firmware/fw_jump.elf $OUTPUT_DIR

#--------------------
# Linux
#--------------------
WORKDIR $LINUX_DIR
RUN sed -i "s|^CONFIG_KVM=.*|CONFIG_KVM=y|g" $LINUX_DIR/arch/riscv/configs/defconfig
RUN make defconfig && make -j$(nproc)
RUN mv $LINUX_DIR/arch/riscv/boot/Image $OUTPUT_DIR

#==============================
# Root Filesystem
#==============================
FROM riscv64/ubuntu:22.04 AS rootfs_builder
RUN apt update && apt upgrade -y
RUN apt install -y systemd init ifupdown busybox udev

## Install test service that run CI test on systemd boot
COPY riscv64/test.service /etc/systemd/system/
COPY riscv64/test-service.sh /bin/
RUN systemctl enable test

## Install network-related configurations
COPY riscv64/interfaces /etc/network/
COPY riscv64/resolv.conf /etc/

#==============================
# Final-Stage Docker Image
#==============================
FROM ubuntu:22.04 AS final

#--------------------
# Version tag
#--------------------
ARG RUST_TOOLCHAIN="1.72.0"

#--------------------
# Directories to be installed from builder and rootfs_builder
#--------------------
ARG OUTPUT_DIR=/opt/bin
ARG INSTALL_DIR=/opt/install
ARG ROOTFS_DIR=/rootfs
ENV PATH="$PATH:/root/.cargo/bin:$INSTALL_DIR/usr/local/bin"

#--------------------
# Prerequisites
#--------------------
RUN apt update
RUN apt install -y curl libglib2.0-dev libfdt-dev libpixman-1-dev libslirp-dev gcc gcc-riscv64-linux-gnu

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain "$RUST_TOOLCHAIN"
RUN rustup target add riscv64gc-unknown-linux-gnu

#--------------------
# Combining all stages
#--------------------
COPY --from=builder $OUTPUT_DIR $OUTPUT_DIR
COPY --from=builder $INSTALL_DIR $INSTALL_DIR
COPY --from=rootfs_builder / $ROOTFS_DIR

## Install script for starting QEMU RISC-V guest
COPY riscv64/qemu.sh /bin/
